/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.CommonErrorResponse
import org.openapitools.client.models.UserMailRegisterData
import org.openapitools.client.models.UserRefreshToken
import org.openapitools.client.models.UserTokens
import org.openapitools.client.models.UserVkRegisterData

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class AuthApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * login user
     * login user via email
     * @param userMailRegisterData Email entered by the user in auth form (optional)
     * @return UserTokens
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiAuthLoginEmailPost(userMailRegisterData: UserMailRegisterData? = null) : UserTokens {
        val localVarResponse = apiAuthLoginEmailPostWithHttpInfo(userMailRegisterData = userMailRegisterData)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UserTokens
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * login user
     * login user via email
     * @param userMailRegisterData Email entered by the user in auth form (optional)
     * @return ApiResponse<UserTokens?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiAuthLoginEmailPostWithHttpInfo(userMailRegisterData: UserMailRegisterData?) : ApiResponse<UserTokens?> {
        val localVariableConfig = apiAuthLoginEmailPostRequestConfig(userMailRegisterData = userMailRegisterData)

        return request<UserMailRegisterData, UserTokens>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiAuthLoginEmailPost
     *
     * @param userMailRegisterData Email entered by the user in auth form (optional)
     * @return RequestConfig
     */
    fun apiAuthLoginEmailPostRequestConfig(userMailRegisterData: UserMailRegisterData?) : RequestConfig<UserMailRegisterData> {
        val localVariableBody = userMailRegisterData
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/auth/login/email",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * login user
     * login user via vk
     * @param userVkRegisterData Email entered by the user in auth form (optional)
     * @return UserTokens
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiAuthLoginVkPost(userVkRegisterData: UserVkRegisterData? = null) : UserTokens {
        val localVarResponse = apiAuthLoginVkPostWithHttpInfo(userVkRegisterData = userVkRegisterData)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UserTokens
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * login user
     * login user via vk
     * @param userVkRegisterData Email entered by the user in auth form (optional)
     * @return ApiResponse<UserTokens?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiAuthLoginVkPostWithHttpInfo(userVkRegisterData: UserVkRegisterData?) : ApiResponse<UserTokens?> {
        val localVariableConfig = apiAuthLoginVkPostRequestConfig(userVkRegisterData = userVkRegisterData)

        return request<UserVkRegisterData, UserTokens>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiAuthLoginVkPost
     *
     * @param userVkRegisterData Email entered by the user in auth form (optional)
     * @return RequestConfig
     */
    fun apiAuthLoginVkPostRequestConfig(userVkRegisterData: UserVkRegisterData?) : RequestConfig<UserVkRegisterData> {
        val localVariableBody = userVkRegisterData
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/auth/login/vk",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * register new user
     * register new user via email
     * @param userRefreshToken User resfresh token (optional)
     * @return UserTokens
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiAuthRefreshPost(userRefreshToken: UserRefreshToken? = null) : UserTokens {
        val localVarResponse = apiAuthRefreshPostWithHttpInfo(userRefreshToken = userRefreshToken)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UserTokens
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * register new user
     * register new user via email
     * @param userRefreshToken User resfresh token (optional)
     * @return ApiResponse<UserTokens?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiAuthRefreshPostWithHttpInfo(userRefreshToken: UserRefreshToken?) : ApiResponse<UserTokens?> {
        val localVariableConfig = apiAuthRefreshPostRequestConfig(userRefreshToken = userRefreshToken)

        return request<UserRefreshToken, UserTokens>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiAuthRefreshPost
     *
     * @param userRefreshToken User resfresh token (optional)
     * @return RequestConfig
     */
    fun apiAuthRefreshPostRequestConfig(userRefreshToken: UserRefreshToken?) : RequestConfig<UserRefreshToken> {
        val localVariableBody = userRefreshToken
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/auth/refresh",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * register new user
     * register new user via email
     * @param userMailRegisterData Email entered by the user in auth form (optional)
     * @return UserTokens
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiAuthRegisterPost(userMailRegisterData: UserMailRegisterData? = null) : UserTokens {
        val localVarResponse = apiAuthRegisterPostWithHttpInfo(userMailRegisterData = userMailRegisterData)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UserTokens
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * register new user
     * register new user via email
     * @param userMailRegisterData Email entered by the user in auth form (optional)
     * @return ApiResponse<UserTokens?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiAuthRegisterPostWithHttpInfo(userMailRegisterData: UserMailRegisterData?) : ApiResponse<UserTokens?> {
        val localVariableConfig = apiAuthRegisterPostRequestConfig(userMailRegisterData = userMailRegisterData)

        return request<UserMailRegisterData, UserTokens>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiAuthRegisterPost
     *
     * @param userMailRegisterData Email entered by the user in auth form (optional)
     * @return RequestConfig
     */
    fun apiAuthRegisterPostRequestConfig(userMailRegisterData: UserMailRegisterData?) : RequestConfig<UserMailRegisterData> {
        val localVariableBody = userMailRegisterData
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/auth/register",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
